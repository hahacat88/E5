# 读入一个算术表达式，以‘；’结束。对该表达式中的圆括号是否配对进行检查，给出正确与错误的信息。若出错还应指出是左括号多于右括号，或是右括号多于左括号，或是先出现了右括号。

# 以下为用Pascal 程序的代码
program CheckParentheses;

var
  Expression: string;
  LeftCount, RightCount: integer;
  CharIndex: integer;
  ErrorType: string;

begin
  Write('请输入算术表达式，以'';''结束：');
  ReadLn(Expression);

  LeftCount := 0;
  RightCount := 0;
  ErrorType := '';

  for CharIndex := 1 to Length(Expression) do
  begin
    if Expression[CharIndex] = '(' then
      LeftCount := LeftCount + 1
    else if Expression[CharIndex] = ')' then
    begin
      RightCount := RightCount + 1;

      if RightCount > LeftCount then
      begin
        ErrorType := '先出现右括号';
        Break;
      end;
    end;
  end;

  if (ErrorType = '') and (LeftCount = RightCount) then
    WriteLn('括号匹配正确')
  else if ErrorType <> '' then
    WriteLn('括号不匹配：', ErrorType)
  else if LeftCount > RightCount then
    WriteLn('括号不匹配：左括号多于右括号')
  else
    WriteLn('括号不匹配：右括号多于左括号');

end.


# 以下为用Python 程序的代码

expression = input("请输入算术表达式，以';'结束：")
left_count = 0
right_count = 0
error_type = ''

for char in expression:
    if char == '(':
        left_count += 1
    elif char == ')':
        right_count += 1

        if right_count > left_count:
            error_type = '先出现右括号'
            break

if not error_type and left_count == right_count:
    print('括号匹配正确')
elif error_type:
    print(f'括号不匹配：{error_type}')
elif left_count > right_count:
    print('括号不匹配：左括号多于右括号')
else:
    print('括号不匹配：右括号多于左括号')

# 程序结束
这个 Python 程序的整体运行流程：

用户输入一个算术表达式，以分号 ';' 结束。
初始化左括号计数 left_count 为 0，右括号计数 right_count 为 0，错误类型 error_type 为空字符串。
遍历输入的算术表达式的每个字符。
如果是左括号 (，增加左括号计数 left_count。
如果是右括号 )，增加右括号计数 right_count。
如果此时右括号数量大于左括号数量，记录错误类型为 '先出现右括号' 并结束循环。
循环结束后，检查是否存在错误类型。如果错误类型为空，继续判断左右括号数量：
如果左右括号数量相等，输出 '括号匹配正确'。
如果左括号数量大于右括号数量，输出 '括号不匹配：左括号多于右括号'。
如果右括号数量大于左括号数量，输出 '括号不匹配：右括号多于左括号'。
如果存在错误类型，输出 '括号不匹配：先出现右括号'。
总体而言，该程序通过循环结构逐个检查输入的算术表达式中的字符。在遍历过程中，它记录左右括号的数量，并检查是否有右括号数量超过左括号的情况。最后，根据左右括号的数量和错误类型输出相应的信息。





